#+AUTHOR: Gabriel Bronzatti Moro e Lucas M. Schnorr
#+TITLE: README
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+STARTUP: overview indent
#+TAGS: Gabriel(G) Lucas(L) noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)
#+mode: org
#+coding: utf-8

* What is the libnina?

- Libnina is a library used to reduce the energy consumption of OpenMP
  parallel applications. The libnina uses two steps, the first step is
  necessary to generate a configuration file that will describe the
  target application's behavior. In the second step, the target
  application will be executed using pomp2 library with libnina,
  libnina will use the configuration file to reduce the energy
  consumption using cpufreq calls to change the CPU frequency
  according to a configuration file.
  
** Example of use
*** Experimento =teste_1=

- Plataform used:

#+begin_src sh :results output :exports both
lscpu | grep -i CPU
#+end_src

#+RESULTS:
: CPU op-mode(s):        32-bit, 64-bit
: CPU(s):                4
: On-line CPU(s) list:   0-3
: CPU family:            6
: Model name:            Intel(R) Core(TM) i5-4210U CPU @ 1.70GHz
: CPU MHz:               1879.400
: CPU max MHz:           2700,0000
: CPU min MHz:           800,0000
: NUMA node0 CPU(s):     0-3

- The strassen algorithm will be used as an example.

#+begin_src sh :results output :exports both
cd teste_1/src/
ls 
#+end_src

#+RESULTS:
: strassen.c

**** Step 1

- We need know about application's behavior, before of use it with
  libnina. We use Scorep, this tool may be installed using our script
  in:

#+begin_src sh :results output :exports both
cd scripts/
ls
#+end_src

#+RESULTS:
: scorep_installation.sh

- Compilation of the target application using Scorep:

#+begin_src sh :results output :exports both
cd teste_1/src/
scorep --nocompiler --nocuda --noonline-access --nopdt --nouser --noopencl gcc -fopenmp strassen.c -o strassen_with_scorep
ls
#+end_src

#+RESULTS:
: strassen.c
: strassen_with_scorep

- Execution using Score-p

#+begin_src sh :results output :exports both
export OMP_NUM_THREADS=4
export SCOREP_ENABLE_TRACING=true
export SCOREP_TOTAL_MEMORY=3G
export SCOREP_METRIC_PAPI=PAPI_TOT_INS,PAPI_TOT_CYC
export SCOREP_EXPERIMENT_DIRECTORY="$HOME/svn/libnina/teste_1/expData/cpu"

sudo -E ./strassen_with_scorep 2800

export OMP_NUM_THREADS=4
export SCOREP_ENABLE_TRACING=true
export SCOREP_TOTAL_MEMORY=3G
export SCOREP_METRIC_PAPI=PAPI_L2_TCA,PAPI_L2_TCM
export SCOREP_EXPERIMENT_DIRECTORY="$HOME/svn/libnina/teste_1/expData/mem"

sudo -E ./strassen_with_scorep 2800

#+end_src

#+RESULTS:
: HPCELO:106.144706
: HPCELO:106.843125


- Now, it's necessary for you install more two dependencies:

***** Otf22csv provided by Akypuera

- This tool used must be installed using the follow script:

#+begin_src sh :results output :exports both
ls scripts/ | grep -i aky
#+end_src

#+RESULTS:
: akypuera_installation.sh

***** R libraries

- The R libraries must be installed using the follow script:

#+begin_src sh :results output :exports both
ls $HOME/svn/libnina/scripts/ | grep -i r_libra
#+end_src

#+RESULTS:
: r_libraries_installation.sh

***** Experiment

- The configuration file used by libnina will be generated now, using
  the follow script:

#+begin_src sh :results output :exports both
cd teste_1/expData/

sudo chmod -R 777 cpu

sudo chmod -R 777 mem

otf22csv cpu/traces.otf2 > cpu/traces.csv

otf22csv mem/traces.otf2 > mem/traces.csv

echo "cpu_results"
head cpu/traces.csv

echo "mem_results"
head mem/traces.csv

#+end_src

#+RESULTS:
#+begin_example
cpu_results
1,106.141621,106.141645,2,!$omp implicit barrier @strassen.c:135,1639,14618
1,0.000261,106.141657,1,!$omp for @strassen.c:117,278563566241,251781086582
1,0.000256,106.141659,0,!$omp parallel @strassen.c:117,278563569230,251781093661
2,105.338303,106.141672,2,!$omp implicit barrier @strassen.c:135,2101649,4378407
0,105.531259,106.141674,2,!$omp implicit barrier @strassen.c:135,2101648,4366888
3,105.118817,106.141674,2,!$omp implicit barrier @strassen.c:135,2103046,5761735
2,0.000487,106.141677,1,!$omp for @strassen.c:117,278565664359,250991882788
2,0.000483,106.141679,0,!$omp parallel @strassen.c:117,278565667348,250991888332
0,0.000016,106.141682,1,!$omp for @strassen.c:117,278565664480,251070318759
3,0.000500,106.141682,1,!$omp for @strassen.c:117,278565665487,250626700398
mem_results
2,106.839966,106.840005,2,!$omp implicit barrier @strassen.c:135,875,380
2,0.000493,106.840008,1,!$omp for @strassen.c:117,3024225497,3032587551
2,0.000489,106.840009,0,!$omp parallel @strassen.c:117,3024225799,3032587576
1,106.566564,106.840025,2,!$omp implicit barrier @strassen.c:135,1112,454
0,106.321866,106.840025,2,!$omp implicit barrier @strassen.c:135,1196,710
3,106.646425,106.840025,2,!$omp implicit barrier @strassen.c:135,749,389
1,0.000491,106.840030,1,!$omp for @strassen.c:117,2810916825,2818190765
1,0.000486,106.840032,0,!$omp parallel @strassen.c:117,2810917340,2818190928
0,0.000015,106.840034,1,!$omp for @strassen.c:117,3059486112,3067632222
3,0.000263,106.840034,1,!$omp for @strassen.c:117,2839135454,2846192468
#+end_example

- Using this script, it'll be generated two folters in expData:

#+begin_src sh :results output :exports both
ls teste_1/expData/
#+end_src

#+RESULTS:
: cpu
: mem

- The folder called =cpu= has the csv file with cpu's metrics for each
  application's region. In =mem= folder has csv file with memory's
  metrics for each application's region too. These two results will be
  joined using a R script:

#+begin_src sh :results output :exports both
cd teste_1/scripts/
Rscript step1_configurationFileExport.r
cat ../expData/configurationFile.csv
#+end_src

#+RESULTS:
: "","lines","maxFreq","region","file"
: "1","117",FALSE,"!$omp parallel ","strassen.c"
: "2","117",FALSE,"!$omp parallel ","strassen.c"
: "3","117",FALSE,"!$omp parallel ","strassen.c"
: "4","117",FALSE,"!$omp parallel ","strassen.c"

#+begin_src sh :results output :exports both
cat $HOME/svn/libnina/teste_1/expData/configurationFile.csv | cut -d ',' -f2,3,4,5 | sed 's/["!\$\ ]*//g' | sed 's/omp//g' |sed 's/implicit[[:space:]]barrier/imp/g' | sed 's/parallel/par/g' | sed 's/FALSE/1200/g' | sed 's/TRUE/2400/g' | sed -e "1d" | sed '/NA/d' > $HOME/svn/libnina/teste_1/expData/ninaFileInput.csv
rm $HOME/svn/libnina/teste_1/expData/configurationFile.csv
cat $HOME/svn/libnina/teste_1/expData/ninaFileInput.csv
#+end_src

#+RESULTS:
: 117,1200,par,strassen.c
: 117,1200,par,strassen.c
: 117,1200,par,strassen.c
: 117,1200,par,strassen.c

- This is a final format to libnina executed strassen program changing
  the frequency according to its regions.

**** Step 2

- Now, we go to compile the libnina:

#+begin_src sh :results output :exports both
cd src/
make
LD_LIBRARY_PATH=/home/gbmoro/svn/libnina/src:$LD_LIBRARY_PATH
#+end_src

#+RESULTS:

- Using libnina in strassen compilation:

#+begin_src sh :session f :results output :exports both 
cd teste_1/src/
/opt/opari2/bin/opari2 strassen.c
gcc -fopenmp -g -O2 -I/opt/opari2/include -c strassen.mod.c -o strassen_c.mod.o
`/opt/opari2/bin/opari2-config --nm` strassen_c.mod.o | `/opt/opari2/bin/opari2-config --region-initialization` > pompregions_c.c
gcc  -I/opt/opari2/include -c pompregions_c.c -o pompregions_c.o
gcc -fopenmp -g -O2 strassen_c.mod.o pompregions_c.o -L/home/gbmoro/svn/libnina/src -lnina -lcpufreq -o strassen_c_inst
ls
#+end_src

#+RESULTS:
: 
:  pompregions_c.c  strassen.c	  strassen_c.mod.o	strassen.mod.c
: pompregions_c.o  strassen_c_inst  strassen.c.opari.inc

- Running

#+begin_src sh :results output :exports both
cd teste_1/src/

export NINA_CONFIG=/home/gbmoro/svn/libnina/teste_1/expData/ninaFileInput.csv

sudo -E LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/gbmoro/svn/libnina/src/ ./strassen_c_inst

#+end_src

#+RESULTS:
#+begin_example
  0: init
11.11.2017.19h35m10s: ->NINA_maxFrequencyOfProcessor: The frequency will be set to max
11.11.2017.19h35m10s -> NINA_CHANGEFREQ: it is impossible to change the CPU frequency. It's necessary the userspace governor...
  0: finalize
#+end_example

- I used this platform to show that it isn't possible to run libnina
  in plataform without userspace governors. This PC only has the
  follow governors:

#+begin_src sh :results output :exports both
cpufreq-info -g
#+end_src

#+RESULTS:
: performance powersave
